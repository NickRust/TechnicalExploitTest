1.21.2020
	Files obtained. 
	Time to get started. 
		Google >>Windows Exploit Tutorial 
			https://www.fuzzysecurity.com/tutorials.html
			https://www.exploit-db.com/papers/13147 - Definitions
			 
			Google >>ASX to MP3 Converter Exploit
			https://www.exploit-db.com/exploits/47468
				^Specific mention of Calculator invoke (implies this scenario is pre-existing)
				
				https://www.fatrodzianko.com/2019/03/13/asx-to-mp3-converter-seh-exploit/ (3.1.3.7)
				https://www.securitysift.com/windows-exploit-development-part-2-intro-stack-overflow/ (3.0.0.7)
				https://www.corelan.be/index.php/2009/07/23/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-2/
					This appears to the the origin of the ASX to Mp3 exploit chalenge/tutorial. Includes calculator invoke. -> Mike Czumak 2013
							Very thourough. 
								Need Immunity debugger to track this.
									Wow this is awesome and I have only a very basic idea of what's going on here. 
					Version difference. Provided version is 3.1.3.7 -> Use Fatrodzianko's 
						Script is Python (whew)
					
1.22.2020
	Attempt to run Fatrodzianko's Python script. Syntax error.
		Script is in 2.7 (Note the Print syntax at the end).
		Install Python 2.7 (already on VM for Immunity)
		Run script Retreieve file. 
			Use exploit. Does not open Calculator.
			Move exploit file to C:, run exploit. Opens Calculator.
			Exploit trigger calc on C:\ but not in Downloads? Need to better understand how the instructions in the payload are derived. Back to Mike Czumak's article. 
				New objective - Get an exploit that works in Downloads folder with self made payload.
					Pull Downloads run into Immunity
						Whelp. That's a lot of information.
							https://youtu.be/6JBRXqT3USI (Immunity Debugger Basics) (6:05 - Note this will not include any stack overflows, we'll get into that the next video)...
								https://youtu.be/N75eELx6eo0 (Simple Stack Overflow)
										https://www.sans.org/reading-room/whitepapers/malicious/paper/36982
										https://resources.infosecinstitute.com/in-depth-seh-exploit-writing-tutorial-using-ollydbg/#gref
										
1.23.2020
	Debugging is nice, but I need to understand how to build a payload as well 
		MSFPayload.
			Application was removed in 2015. Cool, references to Backtrack should have tipped me off there. 
		MSFVenom
			[20 minutes of bad syntax] 
				msfvenom -a x86 --platform Windows -p windows/exec CMD=calc.exe -e x86/shikata_ga_nati
					Breakdown
						msfvenom - self evident
						-a x86 (Architecture, x86 (32 bit)
						--platform Windows (self evident) 
						-p windows/exec CMD=calc.exe (payload windows execute COMMAND calc.exe)
						-e encoder (x86 shikata_ga_nai - polymorphic XOR additive feedback encoder [Japanese translation "it can't be helped" pretty common polite excuse]
						
						Awesome. Output looks pretty garbage. 
							Hey..formats switch. -f (Fatrodzianko uses Python, he seems like a cool guy and that's basically the only language I have any practical knowldge of) 
								Okay. New payload works. Still only executes from C:\
									Spoke to Fatrodzianko - Buffer function is depement on file location. [Explitive deleted] Looks like I can't just overlook that whole buffer overflow magic.
										Immunity - debugger
											Debugging fuzzing.asx 
												File on Desktop
													Hitch: If file path is that strong of a variable on succesfull code execution, I can't improve the use-case of this example file. 
														The location of both Downloads and Desktop will include a Windows account name. 
															[Explitive deleted]
																I may be dumb. %User% exists for this reason. Think like an architect, not a plumber. 
												Hey, Debugging a bunch of A's is super unhelpful
													/USR/share/metasploit-framework/tools/exploit/pattern_create.rb -l 50000
														Oh hey, that EXACT thing is in both articles									funzing.asx
															57316957 ?
															Try to replicate tomorrow.
																										
1.24.2020
	57316957
		/urs/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x57316957 -l 50000
		Exact Matches: 17403, 37683
			Update the Python exploit scrip with 37683
				Create a new exploit file, \downloads\, test.
					Does NOT work. 
						\Desktop\ Does NOT work. 
				Immunity debug \downloads\ 44444444 EIP 00430762. [1.27 - What the hell was I doing here?]
					Too many variables, I'm changing names too much
						Funzing -> asx2mp3 
							57316957. EIP; SEH is still reporting 00000000 address space- Why?
1.25.2020
	Saturday, family time

1.26.2020
	Based on Fatrodzianko's blog I understand that this version requires some finess getting the SEH pointer
		funzing.asx was created with pattern_create to a length of 50000
			(tinkering with Immunity and Mona, note the limitations on the python find function, incorporating the fix outlined by Czumak looks beyond my programing skills)
1.27.2020
	Fresh eyes (ish). 
		Funzing still returns 57316957. 
		nrustexp returns 44444444 - D's
			Start over from scratch with new understanding? Follow along directly and disregard the \Downloads\ goal for now
	Took a break to think about something else
		Realize something important, my test files to check for offset is the rb pattern appended to the provided test file included in the instructions with the pattern entered into the http field.
			This is not the format tested in the scripts, which would directly impact offset
				Formatted the test file more in line with how the python code creates exploit files
					Fresh test, Debugger -> EIP 44357544 - offset script returns 43515
						Modify Python script, run exploit	
							DOES NOT WORK
					Go back to pattern test	in debugger	
						SEH chain -> 44317544, offset script returns 43503
							Modify python script, run exploit	
								WORKS
								Now to test to see if it will work in ALL \Downloads locations regardless of NT USer
									It does not appear to work in other accounts of variable NT account name length
									It does appear to work for usernames that are 5 characters long (to be fair, I only tested one, bdmin)
									I suspect that perfecting this against %user may be beyond me just yet. 
										Exploit appears to work in \Downloads\ with an NT useraccount of 5 characters in length 
			Now that I have a functional exploit, attempt to bypass DEP
				ROP chains
					http://securitydynamics.blogspot.com/2015/11/an-easy-guide-to-bypass-dep-using-rop.html
						!mona noaslr
							MSA2Mfilter03.dll
								!mona rop -m MSA2Mfilter03.dll
									VirtualAlloc looks like the best place to start [1.29: Obviously I didn't fully understand this until 1.29]
								
								https://cxsecurity.com/issue/WLB-2019100028 -max7253 (See first exploit database entry -_-)
									Well. This is it exactly. 
										This is a lot to unpack though, I don't know that I can digest all of the moving pieces and come up with my own in time.
											Well I'll be, this works everywhere? [Update, this works everywhere]
												And he's using MSA2Mfilter03, VirtualAlloc
													Wow, this is a much better way of doing this. ROP chains are fancy.
														This may have to wait until Wednesday.
				https://www.corelan.be/index.php/2010/06/16/exploit-writing-tutorial-part-10-chaining-dep-with-rop-the-rubikstm-cube/
				
1.28.2020
	D&D Club at Kid's school, very little time.
		https://www.corelan.be/index.php/2010/06/16/exploit-writing-tutorial-part-10-chaining-dep-with-rop-the-rubikstm-cube/ 
			Brain hurts.				
				
1.29.2020
	pvefindaddr.py
		!pvefindaddr rop MSA2Mfilter03.dll 
			He said this could take awhile, he wasn't wrong. 
				Errors out before completion - Attribute error Debugger object has no attribute 'disarm'
					AND Mona is the updated version of pvefindaddr. Awesome.
						!Mona 
						I attempted a simple gadget substitution for ROP chains, my file doesn't work. [By hand no less] 
							https://samsclass.info/127/proj/rop.htm 
								Yeah, Mona literally does this for me. [Who knew random chains wouldn't work]
									I get where's he's getting the gadgets, I'll include my own Mona export
										What I don't understand is the struct.pack format he's using
											Its a binary format string
										Back to Fuzzy Security
											https://www.fuzzysecurity.com/tutorials/expDev/7.html
								Python script created. Syntax error in the most random place - rusty.py
									

1.30.2020
	Clean up day
		No responses on Python Syntax question
			Looked at the code, figured out my mistake. 
				Does NOT work. 
					I did not account for bad characters in my Mona ROP, could that be it?
						And this chain is TOTALLY different. 
							Try this again, Rusty2.py
								I have 2 'unable to find gadget' listings. I'm pretty sure this is a problem. I don't expect this will work. 
									Did not work
										Try ASX2MP3.exe
											Does not work 
												Don't think it's my gadgets now. Regardless, lunch is over. Unfortunately I think this is as close as I'm getting. 
				
								